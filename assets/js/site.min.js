!function(){"use strict";function n(n,e,r,i,o){function a(t){if(s)return o(new Error("Scroll cancelled"),e[n]);var i=+new Date,f=Math.min(1,(i-c)/u),m=d(f);e[n]=m*(r-l)+l,g(f<1?a:function(){o(null,e[n])})}var c=+new Date,l=e[n],s=!1,d=t,u=350;return"function"==typeof i?o=i:(d=(i=i||{}).ease||d,u=i.duration||u,o=o||function(){}),l===r?o(new Error("Element already at target scroll position"),e[n]):(g(a),function(){s=!0})}function t(n){return.5*(1-Math.cos(Math.PI*n))}var e=function(n){var t=new XMLHttpRequest,e=function(){};return t.open("GET",n,!0),{then:function(n){return t.onload=function(){(this.status<200||this.status>=400)&&e&&e(this),n(this.response)},t.onerror=e,t.send(),{catch:function(n){e=n}}}}};e("/assets/icons/sprite.svg").then(function(n){var t=document.createElement("figure");t.style.display="none",t.innerHTML=n,document.body.insertBefore(t,document.body.children[0])}).catch(function(n){console.warn("Icon spritesheet could not be loaded\n",n)});var r=function(){return function(n,t){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return function(n,t){var e=[],r=!0,i=!1,o=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done)&&(e.push(a.value),!t||e.length!==t);r=!0);}catch(n){i=!0,o=n}finally{try{!r&&c.return&&c.return()}finally{if(i)throw o}}return e}(n,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=document.scrollingElement||document.documentElement,o={scrollBox:i,find:function(n){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelector(n)},findAll:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return[].concat(function(n){if(Array.isArray(n)){for(var t=0,e=Array(n.length);t<n.length;t++)e[t]=n[t];return e}return Array.from(n)}(t.querySelectorAll(n)))},get scrollTop(){return i.scrollTop}},a=o.find("[data-timer]"),c=0,l=o.findAll("[data-slide]").map(function(n,t){return t?n.classList.remove("active-slide"):n.classList.add("active-slide"),n}),s=function(){l[c].classList.remove("active-slide"),c=c+1===l.length?0:c+1,l[c].classList.add("active-slide"),a.classList.add("running")};a.addEventListener("transitionend",function(){a.classList.remove("running"),setTimeout(s,125)}),setTimeout(function(){a.classList.add("running")},250);var d="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},u="undefined"!=typeof window?window:void 0!==d?d:"undefined"!=typeof self?self:{},f=Object.freeze({default:u,__moduleExports:u}),m=f&&u||f,p=function(n,t){return t={exports:{}},n(t,t.exports),t.exports}(function(n,t){var e=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||function(n){var t=+new Date,e=Math.max(0,16-(t-r)),i=setTimeout(n,e);return r=t,i},r=+new Date,i=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(e=e.bind(m),i=i.bind(m)),(n.exports=e).cancel=i}),v=p.cancel,h=Object.freeze({default:p,__moduleExports:p,cancel:v}),g=h&&p||h,y=function(t,e,r,i){return n("scrollTop",t,e,r,i)},b=function(n){return o.scrollTop+o.find(n).getBoundingClientRect().top-o.find("[data-header]").clientHeight},w=function(n){n.preventDefault(),y(o.scrollBox,b(this.getAttribute("href")),{duration:500})};o.findAll("[data-scroll-to]").forEach(function(n){n.addEventListener("click",w)});var A=o.find("[data-header]"),E=void 0,L=void 0,k=void 0,T=function(){(E>10&&!k||E<=10&&k)&&(k=A.classList.toggle("header--docked")),L=!1},M=function(){L||requestAnimationFrame(T),L=!0,E=o.scrollTop};M(),window.addEventListener("scroll",M);o.findAll("[data-card]").forEach(function(n){(function(n){var t=r(n,2),e=t[0],i=t[1];return e.clientHeight<i.clientHeight?e:i})(n.children).style.position="absolute",o.findAll("[data-card-flip]",n).forEach(function(t){t.addEventListener("click",function(n){return function(){return n.classList.add("card--flip")}}(n))}),o.findAll("[data-card-unflip]",n).forEach(function(t){t.addEventListener("click",function(n){return function(){return n.classList.remove("card--flip")}}(n))})});var x=document.getElementById("map");x&&e("/assets/data/map-config.json").then(function(n){var t=JSON.parse(n),e=t.key,r=t.options,i=t.marker,o=function(){return new google.maps.Map(x,r)},a=function(n){return new google.maps.Marker({position:i,map:n,icon:"/assets/media/logo/llb-map.png"})};window.initMap=function(){a(o())},document.body.appendChild(function(n){var t=document.createElement("script");return t.setAttribute("async",""),t.setAttribute("defer",""),t.setAttribute("src","https://maps.googleapis.com/maps/api/js?key="+n+"&callback=initMap"),t}(e))}).catch(function(n){return console.log(n)});var F=new Date;o.findAll("time[data-year]").forEach(function(n){n.innerHTML+=F.getFullYear()});var q=o.find("[data-header]");o.find("[data-burger]",q).addEventListener("click",function(){q.classList.toggle("header--open"),document.body.classList.toggle("noscroll")}),o.findAll("[data-scroll-to]").forEach(function(n){n.addEventListener("click",function(){q.classList.remove("header--open"),document.body.classList.remove("noscroll")})});var D=o.find("[data-contact-form]");D&&D.addEventListener("submit",function(n){n.preventDefault(),D.classList.add("-sent")})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
