!function(){"use strict";function e(e,t,o,i,r){function a(n){if(s)return r(new Error("Scroll cancelled"),t[e]);var i=+new Date,f=Math.min(1,(i-c)/l),m=d(f);t[e]=m*(o-u)+u,h(f<1?a:function(){r(null,t[e])})}var c=+new Date,u=t[e],s=!1,d=n,l=350;return"function"==typeof i?r=i:(d=(i=i||{}).ease||d,l=i.duration||l,r=r||function(){}),u===o?r(new Error("Element already at target scroll position"),t[e]):(h(a),function(){s=!0})}function n(e){return.5*(1-Math.cos(Math.PI*e))}var t=function(e){var n=new XMLHttpRequest,t=function(){};return n.open("GET",e,!0),{then:function(e){return n.onload=function(){(this.status<200||this.status>=400)&&t&&t(this),e(this.response)},n.onerror=t,n.send(),{catch:function(e){t=e}}}}};t("/assets/icons/sprite.svg").then(function(e){var n=document.createElement("figure");n.style.display="none",n.innerHTML=e,document.body.insertBefore(n,document.body.children[0])}).catch(function(e){console.warn("Icon spritesheet could not be loaded\n",e)});var o=function(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelector(e)},i=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return[].concat(function(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)}(n.querySelectorAll(e)))},r=o("[data-timer]"),a=0,c=i("[data-slide]").map(function(e,n){return n?e.classList.remove("active-slide"):e.classList.add("active-slide"),e}),u=function(){c[a].classList.remove("active-slide"),a=a+1===c.length?0:a+1,c[a].classList.add("active-slide"),r.classList.add("running")};r.addEventListener("transitionend",function(){r.classList.remove("running"),setTimeout(u,125)}),setTimeout(function(){r.classList.add("running")},250);var s="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},d="undefined"!=typeof window?window:void 0!==s?s:"undefined"!=typeof self?self:{},l=Object.freeze({default:d,__moduleExports:d}),f=l&&d||l,m=function(e,n){return n={exports:{}},e(n,n.exports),n.exports}(function(e,n){var t=f.requestAnimationFrame||f.webkitRequestAnimationFrame||f.mozRequestAnimationFrame||function(e){var n=+new Date,t=Math.max(0,16-(n-o)),i=setTimeout(e,t);return o=n,i},o=+new Date,i=f.cancelAnimationFrame||f.webkitCancelAnimationFrame||f.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(t=t.bind(f),i=i.bind(f)),(e.exports=t).cancel=i}),p=m.cancel,v=Object.freeze({default:m,__moduleExports:m,cancel:p}),h=v&&m||v,g=function(n,t,o,i){return e("scrollTop",n,t,o,i)},w=function(e){return document.documentElement.scrollTop+o(e).getBoundingClientRect().top-o("[data-header]").clientHeight},y=function(e){e.preventDefault(),g(document.documentElement,w(this.getAttribute("href")),{duration:500})};i("[data-scroll-to]").forEach(function(e){e.addEventListener("click",y)});var E=document.documentElement,b=o("[data-header]"),L=void 0,A=void 0,k=void 0,M=function(){(L>5&&!k||L<=5&&k)&&(k=b.classList.toggle("header--docked")),A=!1};window.addEventListener("scroll",function(){A||requestAnimationFrame(M),A=!0,L=E.scrollTop});i("[data-card]").forEach(function(e){i("[data-card-flip]",e).forEach(function(n){n.addEventListener("click",function(e){return function(){return e.classList.add("card--flip")}}(e))}),i("[data-card-unflip]",e).forEach(function(n){n.addEventListener("click",function(e){return function(){return e.classList.remove("card--flip")}}(e))})});t("/assets/data/map-config.json").then(function(e){var n=JSON.parse(e),t=n.key,o=n.options,i=n.marker,r=function(){return new google.maps.Map(document.getElementById("map"),o)},a=function(e){return new google.maps.Marker({position:i,map:e})};window.initMap=function(){a(r())},document.body.appendChild(function(e){var n=document.createElement("script");return n.setAttribute("async",""),n.setAttribute("defer",""),n.setAttribute("src","https://maps.googleapis.com/maps/api/js?key="+e+"&callback=initMap"),n}(t))}).catch(function(e){return console.log(e)})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
