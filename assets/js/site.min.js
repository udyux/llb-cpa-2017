!function(){"use strict";function e(e,n,r,o,a){function i(t){if(u)return a(new Error("Scroll cancelled"),n[e]);var o=+new Date,f=Math.min(1,(o-l)/d),m=s(f);n[e]=m*(r-c)+c,v(f<1?i:function(){a(null,n[e])})}var l=+new Date,c=n[e],u=!1,s=t,d=350;return"function"==typeof o?a=o:(s=(o=o||{}).ease||s,d=o.duration||d,a=a||function(){}),c===r?a(new Error("Element already at target scroll position"),n[e]):(v(i),function(){u=!0})}function t(e){return.5*(1-Math.cos(Math.PI*e))}var n=function(e){var t=new XMLHttpRequest,n=function(){};return t.open("GET",e,!0),{then:function(e){return t.onload=function(){(this.status<200||this.status>=400)&&n&&n(this),e(this.response)},t.onerror=n,t.send(),{catch:function(e){n=e}}}}};n("/assets/icons/sprite.svg").then(function(e){var t=document.createElement("figure");t.style.display="none",t.innerHTML=e,document.body.insertBefore(t,document.body.children[0])}).catch(function(e){console.warn("Icon spritesheet could not be loaded\n",e)});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){var e=function(e){return"function"==typeof e},t=Math.pow(2,53)-1,n=function(e){var n=function(e){var t=Number(e);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t}(e);return Math.min(Math.max(n,0),t)},o=function(e){var t=e.next();return!Boolean(t.done)&&t};return function(t){var a,i=arguments.length>1?arguments[1]:void 0;if(void 0!==i){if(!e(i))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}var l,c,u=function(t,n){if(null!=t&&null!=n){var r=t[n];if(null==r)return;if(!e(r))throw new TypeError(r+" is not a function");return r}}(t,function(e){if(null!=e){if(["string","number","boolean","symbol"].indexOf(void 0===e?"undefined":r(e))>-1)return Symbol.iterator;if("undefined"!=typeof Symbol&&"iterator"in Symbol&&Symbol.iterator in e)return Symbol.iterator;if("@@iterator"in e)return"@@iterator"}}(t));if(void 0!==u){l=e(this)?Object(new this):[];var s=u.call(t);if(null==s)throw new TypeError("Array.from requires an array-like or iterable object");c=0;for(var d,f;;){if(!(d=o(s)))return l.length=c,l;f=d.value,l[c]=i?i.call(a,f,c):f,c++}}else{var m=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var p=n(m.length);l=e(this)?Object(new this(p)):new Array(p),c=0;for(var v;c<p;)v=m[c],l[c]=i?i.call(a,v,c):v,c++;l.length=p}return l}}(),i="function"==typeof Array.from?Array.from:a,l=document.scrollingElement||document.documentElement,c={scrollBox:l,find:function(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelector(e)},findAll:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return i(t.querySelectorAll(e))},get scrollTop(){return l.scrollTop}},u=c.find("[data-timer]"),s=0,d=c.findAll("[data-slide]").map(function(e,t){return t?e.classList.remove("active-slide"):e.classList.add("active-slide"),e}),f=function(){d[s].classList.remove("active-slide"),s=s+1===d.length?0:s+1,d[s].classList.add("active-slide"),u.classList.add("running")};u.addEventListener("transitionend",function(){u.classList.remove("running"),setTimeout(f,125)}),setTimeout(function(){u.classList.add("running")},250);var m="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},p="undefined"!=typeof window?window:void 0!==m?m:"undefined"!=typeof self?self:{},v=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e,t){var n=p.requestAnimationFrame||p.webkitRequestAnimationFrame||p.mozRequestAnimationFrame||function(e){var t=+new Date,n=Math.max(0,16-(t-r)),o=setTimeout(e,n);return r=t,o},r=+new Date,o=p.cancelAnimationFrame||p.webkitCancelAnimationFrame||p.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(n=n.bind(p),o=o.bind(p)),(e.exports=n).cancel=o}),h=function(t,n,r,o){return e("scrollTop",t,n,r,o)},y=function(e){return c.scrollTop+c.find(e).getBoundingClientRect().top-c.find("[data-header]").clientHeight},b=function(e){e.preventDefault(),h(c.scrollBox,y(this.getAttribute("href")),{duration:500})};c.findAll("[data-scroll-to]").forEach(function(e){e.addEventListener("click",b)});var g=c.find("[data-header]"),w=void 0,E=void 0,A=void 0,L=function(){(w>10&&!A||w<=10&&A)&&(A=g.classList.toggle("header--docked")),E=!1},T=function(){E||requestAnimationFrame(L),E=!0,w=c.scrollTop};T(),window.addEventListener("scroll",T);c.findAll("[data-card]").forEach(function(e){(function(e){var t=o(e,2),n=t[0],r=t[1];return n.clientHeight<r.clientHeight?n:r})(e.children).style.position="absolute",c.findAll("[data-card-flip]",e).forEach(function(t){t.addEventListener("click",function(e){return function(){return e.classList.add("card--flip")}}(e))}),c.findAll("[data-card-unflip]",e).forEach(function(t){t.addEventListener("click",function(e){return function(){return e.classList.remove("card--flip")}}(e))})});var M=document.getElementById("map");M&&n("/assets/data/map-config.json").then(function(e){var t=JSON.parse(e),n=t.key,r=t.options,o=t.marker,a=function(){return new google.maps.Map(M,r)},i=function(e){return new google.maps.Marker({position:o,map:e,icon:"/assets/media/logo/llb-map.png"})};window.initMap=function(){i(a())},document.body.appendChild(function(e){var t=document.createElement("script");return t.setAttribute("async",""),t.setAttribute("defer",""),t.setAttribute("src","https://maps.googleapis.com/maps/api/js?key="+e+"&callback=initMap"),t}(n))}).catch(function(e){return console.log(e)});var S=new Date;c.findAll("time[data-year]").forEach(function(e){e.innerHTML+=S.getFullYear()});var k=c.find("[data-header]");c.find("[data-burger]",k).addEventListener("click",function(){k.classList.toggle("header--open"),document.body.classList.toggle("noscroll")}),c.findAll("[data-scroll-to]").forEach(function(e){e.addEventListener("click",function(){k.classList.remove("header--open"),document.body.classList.remove("noscroll")})}),function(e){e&&(c.findAll("input, textarea",e).forEach(function(e){e.addEventListener("focus",function(){e.dataset.state="ok"})}),e.addEventListener("submit",function(t){t.preventDefault();var n=new XMLHttpRequest,r=new FormData,o=!0,a=!1,i=c.find("[data-attachment]",e),l={name:c.find('[name="name"]',e),surname:c.find('[name="surname"]',e),email:c.find('[name="email"]',e),message:c.find('[name="message"]',e)};Object.values(l).forEach(function(e){e.value&&e.value.length?"email"!==e.name||/.+@.+\..+/.test(e.value)||(e.dataset.state="error",o=!1):(e.dataset.state="error",o=!1)}),!a&&o&&(a=!0,n.open("POST","http://udy.io/api/mail/",!0),e.dataset.state="sending",r.append("sitename","llb-cpa"),r.append("email",l.email.value),r.append("mailto","reception@llbcpa.ca"),r.append("message",l.message.value),r.append("subject","Nouveau contact"),r.append("name",l.name.value+" "+l.surname.value),i&&r.append("attachment",i.files[0]),n.addEventListener("load",function(){this.status>=200&&this.status<400?e.dataset.state="success":e.dataset.state="error"}),n.send(r))}))}(c.find("[data-contact-form]"))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
