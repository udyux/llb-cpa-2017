!function(){"use strict";function e(e,n,a,i,r){function o(t){if(l)return r(new Error("Scroll cancelled"),n[e]);var i=+new Date,m=Math.min(1,(i-c)/u),p=d(m);n[e]=p*(a-s)+s,f(m<1?o:function(){r(null,n[e])})}var c=+new Date,s=n[e],l=!1,d=t,u=350;return"function"==typeof i?r=i:(d=(i=i||{}).ease||d,u=i.duration||u,r=r||function(){}),s===a?r(new Error("Element already at target scroll position"),n[e]):(f(o),function(){l=!0})}function t(e){return.5*(1-Math.cos(Math.PI*e))}var n=function(e){var t=new XMLHttpRequest,n=function(){};return t.open("GET",e,!0),{then:function(e){return t.onload=function(){(this.status<200||this.status>=400)&&n&&n(this),e(this.response)},t.onerror=n,t.send(),{catch:function(e){n=e}}}}};n("/assets/icons/sprite.svg").then(function(e){var t=document.createElement("figure");t.style.display="none",t.innerHTML=e,document.body.insertBefore(t,document.body.children[0])}).catch(function(e){console.warn("Icon spritesheet could not be loaded\n",e)});var a=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],a=!0,i=!1,r=void 0;try{for(var o,c=e[Symbol.iterator]();!(a=(o=c.next()).done)&&(n.push(o.value),!t||n.length!==t);a=!0);}catch(e){i=!0,r=e}finally{try{!a&&c.return&&c.return()}finally{if(i)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=document.scrollingElement||document.documentElement,r={scrollBox:i,find:function(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelector(e)},findAll:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t.querySelectorAll(e)))},get scrollTop(){return i.scrollTop}},o=r.find("[data-timer]"),c=0,s=r.findAll("[data-slide]").map(function(e,t){return t?e.classList.remove("active-slide"):e.classList.add("active-slide"),e}),l=function(){s[c].classList.remove("active-slide"),c=c+1===s.length?0:c+1,s[c].classList.add("active-slide"),o.classList.add("running")};o.addEventListener("transitionend",function(){o.classList.remove("running"),setTimeout(l,125)}),setTimeout(function(){o.classList.add("running")},250);var d="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},u="undefined"!=typeof window?window:void 0!==d?d:"undefined"!=typeof self?self:{},f=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e,t){var n=u.requestAnimationFrame||u.webkitRequestAnimationFrame||u.mozRequestAnimationFrame||function(e){var t=+new Date,n=Math.max(0,16-(t-a)),i=setTimeout(e,n);return a=t,i},a=+new Date,i=u.cancelAnimationFrame||u.webkitCancelAnimationFrame||u.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(n=n.bind(u),i=i.bind(u)),(e.exports=n).cancel=i}),m=function(t,n,a,i){return e("scrollTop",t,n,a,i)},p=function(e){return r.scrollTop+r.find(e).getBoundingClientRect().top-r.find("[data-header]").clientHeight},v=function(e){e.preventDefault(),m(r.scrollBox,p(this.getAttribute("href")),{duration:500})};r.findAll("[data-scroll-to]").forEach(function(e){e.addEventListener("click",v)});var h=r.find("[data-header]"),g=void 0,y=void 0,b=void 0,w=function(){(g>10&&!b||g<=10&&b)&&(b=h.classList.toggle("header--docked")),y=!1},E=function(){y||requestAnimationFrame(w),y=!0,g=r.scrollTop};E(),window.addEventListener("scroll",E);r.findAll("[data-card]").forEach(function(e){(function(e){var t=a(e,2),n=t[0],i=t[1];return n.clientHeight<i.clientHeight?n:i})(e.children).style.position="absolute",r.findAll("[data-card-flip]",e).forEach(function(t){t.addEventListener("click",function(e){return function(){return e.classList.add("card--flip")}}(e))}),r.findAll("[data-card-unflip]",e).forEach(function(t){t.addEventListener("click",function(e){return function(){return e.classList.remove("card--flip")}}(e))})});var L=document.getElementById("map");L&&n("/assets/data/map-config.json").then(function(e){var t=JSON.parse(e),n=t.key,a=t.options,i=t.marker,r=function(){return new google.maps.Map(L,a)},o=function(e){return new google.maps.Marker({position:i,map:e,icon:"/assets/media/logo/llb-map.png"})};window.initMap=function(){o(r())},document.body.appendChild(function(e){var t=document.createElement("script");return t.setAttribute("async",""),t.setAttribute("defer",""),t.setAttribute("src","https://maps.googleapis.com/maps/api/js?key="+e+"&callback=initMap"),t}(n))}).catch(function(e){return console.log(e)});var A=new Date;r.findAll("time[data-year]").forEach(function(e){e.innerHTML+=A.getFullYear()});var k=r.find("[data-header]");r.find("[data-burger]",k).addEventListener("click",function(){k.classList.toggle("header--open"),document.body.classList.toggle("noscroll")}),r.findAll("[data-scroll-to]").forEach(function(e){e.addEventListener("click",function(){k.classList.remove("header--open"),document.body.classList.remove("noscroll")})}),function(e){e&&(r.findAll("input, textarea",e).forEach(function(e){e.addEventListener("focus",function(){e.dataset.state="ok"})}),e.addEventListener("submit",function(t){t.preventDefault();var n=new XMLHttpRequest,a=new FormData,i=!0,o=!1,c=r.find("[data-attachment]",e),s={name:r.find('[name="name"]',e),surname:r.find('[name="surname"]',e),email:r.find('[name="email"]',e),message:r.find('[name="message"]',e)};Object.values(s).forEach(function(e){e.value&&e.value.length?"email"!==e.name||/.+@.+\..+/.test(e.value)||(e.dataset.state="error",i=!1):(e.dataset.state="error",i=!1)}),!o&&i&&(o=!0,n.open("POST","http://udy.io/api/mail/",!0),e.dataset.state="sending",a.append("sitename","llb-cpa"),a.append("email",s.email.value),a.append("mailto","reception@llbcpa.ca"),a.append("message",s.message.value),a.append("subject","Nouveau contact"),a.append("name",s.name.value+" "+s.surname.value),c&&a.append("attachment",c.files[0]),n.addEventListener("load",function(){this.status>=200&&this.status<400?e.dataset.state="success":e.dataset.state="error"}),n.send(a))}))}(r.find("[data-contact-form]"))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
